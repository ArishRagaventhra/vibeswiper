create table public.event_organizer_contacts (
  id uuid not null default extensions.uuid_generate_v4 (),
  event_id uuid not null,
  name text not null,
  email text not null,
  phone text not null,
  contact_verified boolean null default false,
  verification_deadline timestamp with time zone null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint event_organizer_contacts_pkey primary key (id),
  constraint event_organizer_contacts_event_id_fkey foreign KEY (event_id) references events (id) on delete CASCADE,
  constraint event_organizer_contacts_email_check check (
    (
      email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'::text
    )
  ),
  constraint event_organizer_contacts_phone_check check ((phone ~* '^\+?[\d\s-]{10,}$'::text))
) TABLESPACE pg_default;

create index IF not exists idx_event_organizer_contacts_event_id on public.event_organizer_contacts using btree (event_id) TABLESPACE pg_default;

create index IF not exists idx_event_organizer_contacts_verification on public.event_organizer_contacts using btree (contact_verified, verification_deadline) TABLESPACE pg_default;

create trigger set_updated_at BEFORE
update on event_organizer_contacts for EACH row
execute FUNCTION handle_updated_at ();