create table public.events (
  id uuid not null default extensions.uuid_generate_v4 (),
  creator_id uuid not null,
  title text not null,
  description text null,
  location text null,
  start_time timestamp with time zone not null,
  end_time timestamp with time zone not null,
  event_type text null default 'free'::text,
  max_participants integer null,
  category text null,
  tags text[] null,
  event_status text null default 'draft'::text,
  registration_deadline timestamp with time zone null,
  ticket_price numeric(10, 2) null,
  currency text null,
  media_urls text[] null default array[]::text[],
  participant_count integer null default 0,
  waitlist_enabled boolean null default false,
  waitlist_limit integer null,
  cancellation_reason text null,
  visibility text null default 'public'::text,
  metadata jsonb null default '{}'::jsonb,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  favorites_count integer null default 0,
  status public.event_status null default 'upcoming'::event_status,
  recurring_pattern text null,
  reminder_before integer null,
  access_code text null,
  deleted_at timestamp with time zone null,
  payment_status text null default 'unpaid'::text,
  is_platform_fee_paid boolean null default false,
  platform_payment_id text null,
  vibe_price numeric(10, 2) null,
  constraint events_pkey primary key (id),
  constraint events_platform_payment_id_key unique (platform_payment_id),
  constraint events_creator_id_fkey foreign KEY (creator_id) references profiles (id) on delete CASCADE,
  constraint events_visibility_check check (
    (
      visibility = any (
        array['public'::text, 'private'::text, 'unlisted'::text]
      )
    )
  ),
  constraint valid_dates check ((end_time > start_time)),
  constraint valid_price check (
    (
      (
        (event_type = 'free'::text)
        and (
          (ticket_price is null)
          or (ticket_price = (0)::numeric)
        )
      )
      or (
        (event_type = 'paid'::text)
        and (ticket_price > (0)::numeric)
      )
    )
  ),
  constraint valid_registration check (
    (
      (registration_deadline is null)
      or (registration_deadline <= start_time)
    )
  ),
  constraint valid_vibe_price check (
    (
      (
        (event_type = 'free'::text)
        and (vibe_price is null)
      )
      or (
        (event_type = 'paid'::text)
        and (vibe_price is not null)
        and (vibe_price <= ticket_price)
      )
    )
  ),
  constraint events_event_status_check check (
    (
      event_status = any (
        array[
          'draft'::text,
          'published'::text,
          'cancelled'::text,
          'completed'::text
        ]
      )
    )
  ),
  constraint events_event_type_check check (
    (
      event_type = any (
        array['free'::text, 'paid'::text, 'invitation'::text]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_events_active on public.events using btree (created_at) TABLESPACE pg_default
where
  (deleted_at is null);

create index IF not exists idx_events_creator on public.events using btree (creator_id) TABLESPACE pg_default;

create index IF not exists idx_events_status on public.events using btree (event_status) TABLESPACE pg_default;

create index IF not exists idx_events_start_time on public.events using btree (start_time) TABLESPACE pg_default;

create index IF not exists idx_events_category on public.events using btree (category) TABLESPACE pg_default;

create index IF not exists idx_events_visibility on public.events using btree (visibility) TABLESPACE pg_default;

create index IF not exists idx_events_deleted_at on public.events using btree (deleted_at) TABLESPACE pg_default
where
  (deleted_at is not null);

create index IF not exists idx_events_access_code on public.events using btree (access_code) TABLESPACE pg_default;

create trigger cleanup_orphaned_event_records BEFORE DELETE on events for EACH row
execute FUNCTION cleanup_orphaned_event_records ();

create trigger create_default_chat_room_trigger
after INSERT on events for EACH row
execute FUNCTION create_default_chat_room ();

create trigger create_default_chat_rooms_trigger
after INSERT on events for EACH row
execute FUNCTION create_default_chat_rooms ();