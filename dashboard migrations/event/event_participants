create table public.event_participants (
  event_id uuid not null,
  user_id uuid not null,
  status text null default 'pending'::text,
  role text null default 'attendee'::text,
  joined_at timestamp with time zone null default now(),
  left_date timestamp with time zone null,
  waitlist_position integer null,
  notification_preferences jsonb null default '{"push": true, "email": true}'::jsonb,
  metadata jsonb null default '{}'::jsonb,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint event_participants_pkey primary key (event_id, user_id),
  constraint event_participants_event_id_fkey foreign KEY (event_id) references events (id) on delete CASCADE,
  constraint event_participants_user_id_fkey foreign KEY (user_id) references profiles (id) on delete CASCADE,
  constraint event_participants_role_check check (
    (
      role = any (
        array[
          'attendee'::text,
          'organizer'::text,
          'speaker'::text,
          'volunteer'::text
        ]
      )
    )
  ),
  constraint event_participants_status_check check (
    (
      status = any (
        array[
          'pending'::text,
          'accepted'::text,
          'rejected'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_event_participants_event on public.event_participants using btree (event_id) TABLESPACE pg_default;

create index IF not exists idx_event_participants_user on public.event_participants using btree (user_id) TABLESPACE pg_default;

create trigger update_participant_count_trigger
after INSERT
or DELETE
or
update on event_participants for EACH row
execute FUNCTION update_participant_count ();