import 'dart:io';
import 'dart:typed_data';
import 'dart:ui' as ui;
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import 'package:go_router/go_router.dart';
import 'package:path_provider/path_provider.dart';
import 'package:share_plus/share_plus.dart';
import 'package:qr_flutter/qr_flutter.dart';
import 'package:file_saver/file_saver.dart';
import '../controllers/booking_history_controller.dart';
import '../../../config/theme.dart';
import '../../../config/routes.dart';

class BookingDetailsScreen extends ConsumerStatefulWidget {
  final String bookingId;
  
  const BookingDetailsScreen({
    Key? key,
    required this.bookingId,
  }) : super(key: key);

  @override
  ConsumerState<BookingDetailsScreen> createState() => _BookingDetailsScreenState();
}

class _BookingDetailsScreenState extends ConsumerState<BookingDetailsScreen> {
  bool _isImageLiked = false;
  int _currentImageIndex = 0;

  // Track QR code interactions for analytics
  int _qrCodeInteractions = 0;
  bool _hasTrackedPaymentLinkClick = false;
  
  // Key for the ticket widget to prevent rendering issues
  // We've moved this to a field to ensure it's stable across rebuilds

  
  @override
  void initState() {
    super.initState();
    // Load booking details only once at initialization
    Future.microtask(() => 
        ref.read(bookingHistoryControllerProvider.notifier).loadBookingDetails(
            widget.bookingId)
    );
  }

  @override
  Widget build(BuildContext context) {
    final state = ref.watch(bookingHistoryControllerProvider);
    final booking = state.selectedBooking;
    final theme = Theme.of(context);
    final isDarkMode = theme.brightness == Brightness.dark;
    final screenSize = MediaQuery
        .of(context)
        .size;
    final isDesktop = screenSize.width > 1024;
    final isTablet = screenSize.width > 768 && screenSize.width <= 1024;

    return Scaffold(
      backgroundColor: isDarkMode ? Colors.black : theme
          .scaffoldBackgroundColor,
      appBar: AppBar(
        title: Text(
          'Booking Details',
          style: theme.textTheme.titleLarge!.copyWith(
            fontWeight: FontWeight.bold,
            color: isDarkMode ? Colors.white : Colors.black87,
          ),
        ),
        elevation: 0,
        backgroundColor: isDarkMode ? Colors.black : theme
            .scaffoldBackgroundColor,
        leading: IconButton(
          icon: Icon(
            Icons.arrow_back_ios,
            color: isDarkMode ? Colors.white : Colors.black87,
          ),
          onPressed: () => context.go(AppRoutes.bookingHistory),
        ),
        actions: [
          IconButton(
            icon: Icon(
              Icons.share,
              color: isDarkMode ? Colors.white : Colors.black87,
            ),
            onPressed: () {
              if (booking != null) {
                Share.share(
                    'Check out my booking: ${booking['booking_reference']}');
              }
            },
          ),
        ],
      ),
      body: isDesktop || isTablet
          ? _buildDesktopLayout(context, state, isDarkMode)
          : _buildBody(context, state),
      bottomNavigationBar: booking != null && !isDesktop
          ? _buildBottomBar(context, booking)
          : null,
    );
  }

  Widget _buildDesktopLayout(BuildContext context, BookingHistoryState state,
      bool isDarkMode) {
    final theme = Theme.of(context);
    final booking = state.selectedBooking;

    if (state.isLoading) {
      return Center(
        child: CircularProgressIndicator(
          valueColor: AlwaysStoppedAnimation<Color>(
            isDarkMode ? Colors.white : theme.primaryColor,
          ),
        ),
      );
    }

    if (state.error != null || booking == null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              'Oops! Something went wrong',
              style: theme.textTheme.titleLarge,
            ),
            const SizedBox(height: 8),
            Text(
              state.error ?? 'Booking not found',
              style: theme.textTheme.bodyMedium,
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: () {
                ref.read(bookingHistoryControllerProvider.notifier)
                    .loadBookingDetails(widget.bookingId);
              },
              child: const Text('Try Again'),
            ),
          ],
        ),
      );
    }

    return Padding(
      padding: const EdgeInsets.all(24.0),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Left side - Event Image and Details
          Expanded(
            flex: 3,
            child: Card(
              elevation: 4,
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16)),
              color: isDarkMode ? Colors.grey[900] : Colors.white,
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(24),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    ClipRRect(
                      borderRadius: BorderRadius.circular(12),
                      child: AspectRatio(
                        aspectRatio: 16 / 9,
                        child: Image.network(
                          booking['events']['media_urls']?[0] ??
                              'https://via.placeholder.com/400x200',
                          fit: BoxFit.cover,
                        ),
                      ),
                    ),
                    const SizedBox(height: 24),
                    Text(
                      booking['events']['title'] ?? 'Unknown Event',
                      style: theme.textTheme.headlineMedium!.copyWith(
                        fontWeight: FontWeight.bold,
                        color: isDarkMode ? Colors.white : Colors.black87,
                      ),
                    ),
                    const SizedBox(height: 16),
                    _buildEventDetails(context, booking['events']),
                  ],
                ),
              ),
            ),
          ),
          const SizedBox(width: 24),
          // Right side - Booking Information
          Expanded(
            flex: 2,
            child: Card(
              elevation: 4,
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16)),
              color: isDarkMode ? Colors.grey[900] : Colors.white,
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(24),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Booking Information',
                      style: theme.textTheme.titleLarge!.copyWith(
                        fontWeight: FontWeight.bold,
                        color: isDarkMode ? Colors.white : Colors.black87,
                      ),
                    ),
                    const SizedBox(height: 24),
                    _buildBookingDetails(context, booking),
                    const SizedBox(height: 24),
                    if (booking['booking_status'] == 'confirmed' &&
                        booking['payment_status'] == 'paid')
                      Center(
                        child: ElevatedButton.icon(
                          icon: const Icon(Icons.download),
                          label: const Text('Download Ticket'),
                          style: ButtonStyle(
                            backgroundColor: MaterialStateProperty.all(
                              isDarkMode ? theme.primaryColorDark : theme
                                  .primaryColor,
                            ),
                            foregroundColor: MaterialStateProperty.all(
                                Colors.white),
                            padding: MaterialStateProperty.all(
                              const EdgeInsets.symmetric(
                                vertical: 12,
                                horizontal: 24,
                              ),
                            ),
                            shape: MaterialStateProperty.all(
                              RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(50),
                              ),
                            ),
                          ),
                          onPressed: () {
                            // Track payment link interaction
                            if (!_hasTrackedPaymentLinkClick) {
                              setState(() {
                                _hasTrackedPaymentLinkClick = true;
                              });
                              // You could log this to analytics in a real app
                              debugPrint(
                                  'Payment link clicked - tracking interaction');
                            }
                            _downloadTicket(context);
                          },
                        ),
                      ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBody(BuildContext context, BookingHistoryState state) {
    final theme = Theme.of(context);
    final isDarkMode = theme.brightness == Brightness.dark;

    if (state.isLoading) {
      return Center(
        child: CircularProgressIndicator(
          valueColor: AlwaysStoppedAnimation<Color>(
            isDarkMode ? Colors.white : theme.primaryColor,
          ),
        ),
      );
    }

    if (state.error != null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              'Oops! Something went wrong',
              style: Theme
                  .of(context)
                  .textTheme
                  .titleLarge,
            ),
            const SizedBox(height: 8),
            Text(
              state.error!,
              style: Theme
                  .of(context)
                  .textTheme
                  .bodyMedium,
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: () {
                ref.read(bookingHistoryControllerProvider.notifier)
                    .loadBookingDetails(widget.bookingId);
              },
              child: const Text('Try Again'),
            ),
          ],
        ),
      );
    }

    final booking = state.selectedBooking;
    if (booking == null) {
      return const Center(
        child: Text('Booking not found'),
      );
    }

    final event = booking['events'] as Map<String, dynamic>;
    final payments = booking['payment'] as List<dynamic>?;
    final metrics = booking['metrics'] as List<dynamic>?;

    // Debug output to help identify all available fields
    debugPrint('Booking details - Event data keys: ${event.keys.join(', ')}');
    debugPrint('Booking details - Event start_date: ${event['start_date']}');
    debugPrint('Booking details - Event date: ${event['date']}');
    debugPrint('Booking details - Full event data: $event');

    final bookingStatus = booking['booking_status'] as String;
    final paymentStatus = booking['payment_status'] as String;
    final isPaid = paymentStatus == 'paid';
    final isConfirmed = bookingStatus == 'confirmed';

    final bookingDate = DateTime.parse(booking['created_at']);
    final formattedBookingDate = DateFormat('MMM dd, yyyy - hh:mm a').format(
        bookingDate);

    // Event date parsing - with null safety
    DateTime? eventStartDate;
    DateTime? eventEndDate;
    String formattedEventDate;

    try {
      // Safely parse start date if available - checking for all possible field names
      if (event['start_time'] != null) {
        eventStartDate = DateTime.parse(event['start_time']);
        debugPrint('Using start_time field: ${event['start_time']}');
      } else if (event['start_date'] != null) {
        eventStartDate = DateTime.parse(event['start_date']);
        debugPrint('Using start_date field: ${event['start_date']}');
      } else if (event['start_datetime'] != null) {
        eventStartDate = DateTime.parse(event['start_datetime']);
        debugPrint('Using start_datetime field: ${event['start_datetime']}');
      }

      // Safely parse end date if available - checking for all possible field names
      if (event['end_time'] != null) {
        eventEndDate = DateTime.parse(event['end_time']);
      } else if (event['end_date'] != null) {
        eventEndDate = DateTime.parse(event['end_date']);
      } else if (event['end_datetime'] != null) {
        eventEndDate = DateTime.parse(event['end_datetime']);
      }

      // Format dates with proper null checks
      if (eventStartDate != null) {
        if (eventEndDate != null) {
          formattedEventDate =
          '${DateFormat('EEE, MMM dd, yyyy - hh:mm a').format(
              eventStartDate)} to ${DateFormat('hh:mm a').format(
              eventEndDate)}';
        } else {
          formattedEventDate =
              DateFormat('EEE, MMM dd, yyyy - hh:mm a').format(eventStartDate);
        }
      } else {
        formattedEventDate = 'Date not specified';
      }
    } catch (e) {
      // Fallback if date parsing fails
      formattedEventDate = 'Date information unavailable';
      debugPrint('Error parsing event dates: $e');
    }
